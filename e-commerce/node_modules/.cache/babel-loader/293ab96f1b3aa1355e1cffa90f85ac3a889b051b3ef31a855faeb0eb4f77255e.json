{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\personal\\\\Desktop\\\\Laraib Masood\\\\NETSOL\\\\e-commerce\\\\src\\\\Screens\\\\ProfileScreen.js\",\n  _s = $RefreshSig$();\nimport './ProfileScreen.css';\nimport { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateSuccess, logout } from '../Redux/authSlice'; // Import logout for token expiry handling\nimport { clearCart } from '../Redux/cartSlice'; // Assuming you clear cart on logout\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for redirects\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ProfileScreen() {\n  _s();\n  const dispatch = useDispatch();\n  const navigate = useNavigate(); // Initialize useNavigate\n  const {\n    user,\n    token\n  } = useSelector(state => state.auth);\n\n  // State for form fields\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [mobilenumber, setMobilenumber] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [loading, setLoading] = useState(true); // Start as true, expecting an initial fetch\n\n  // Effect 1: Fetch user profile data from the backend\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (!token) {\n        setError(\"No token found. Please Log in.\");\n        setLoading(false); // Stop loading if no token\n        navigate('/Login'); // Redirect to login\n        return;\n      }\n\n      // Set loading only if we are actually going to fetch\n      // (it's already true from initial useState)\n      setError(\"\");\n      setSuccess(\"\");\n      try {\n        const res = await fetch(\"http://localhost:5000/api/profile\", {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await res.json();\n        if (res.ok) {\n          // Directly update local state with fetched data\n          // NO dispatch(updateSuccess(data)) here for initial fetch\n          // The second useEffect handles syncing from Redux after loginSuccess/initializeAuth\n          setName(data.name || \"\");\n          setEmail(data.email || \"\");\n          setMobilenumber(data.mobilenumber || \"\");\n          setAge(data.age || \"\");\n          // No need to dispatch updateSuccess here. The local state is updated.\n          // The Redux 'user' state should already have the correct data from loginSuccess\n          // or initializeAuth during app load. This fetch is just to confirm/get latest.\n        } else if (res.status === 401 || res.status === 403) {\n          setError(data.message || \"Session expired. Please log in again.\");\n          dispatch(logout());\n          dispatch(clearCart());\n          navigate('/Login');\n        } else {\n          setError(data.message || \"Failed to Fetch Profile\");\n        }\n      } catch (fetchError) {\n        console.error(\"Fetch Profile Error\", fetchError);\n        setError(\"Server Error. Could not Fetch Profile.\");\n      } finally {\n        setLoading(false); // Always set loading to false after fetch attempt\n      }\n    };\n\n    // This condition makes sure we only fetch if we have a token.\n    // It's crucial for the initial load.\n    // The `user` object might be populated by `authSlice` from localStorage,\n    // so checking `token` is sufficient for initiating the fetch.\n    if (token) {\n      fetchUserProfile();\n    } else {\n      // If component mounts and no token (should be caught by ProtectedRoute normally)\n      setLoading(false); // No fetch, so stop loading\n      setError(\"You need to be logged in to view this page.\");\n      navigate('/Login'); // Ensure redirection if not logged in\n    }\n  }, [token, dispatch, navigate]); // Dependencies: only token, dispatch, and navigate\n\n  // Effect 2: Synchronize local state with Redux user state\n  // This effect ensures that if the 'user' object in Redux (e.g., from loginSuccess)\n  // is updated, the form fields reflect that. It also handles the initial population\n  // if Redux 'user' is already available from localStorage on component mount.\n  useEffect(() => {\n    if (user) {\n      setName(user.name || \"\");\n      setEmail(user.email || \"\");\n      setMobilenumber(user.mobilenumber || \"\");\n      setAge(user.age || \"\");\n      setPassword(\"\");\n      setConfirmPassword(\"\");\n      // Set loading to false here if the initial user data is available\n      // directly from Redux without needing a fetch.\n      // This ensures the form is usable even before the fetchUserProfile finishes\n      // (or if it's skipped for some reason).\n      setLoading(false); // Assuming user data is here, we are ready\n    }\n  }, [user]); // Only depends on the Redux 'user' object\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n    setLoading(true);\n    if (password && password !== confirmPassword) {\n      // Only check if password is provided\n      setError(\"Password fields do not match.\");\n      setLoading(false);\n      return;\n    }\n    try {\n      const res = await fetch('http://localhost:5000/api/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          mobilenumber,\n          age: Number(age),\n          ...(password && {\n            password\n          })\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        setSuccess(data.message || 'Profile Updated Successfully!');\n        // IMPORTANT: Dispatch updateSuccess HERE after successful backend update\n        dispatch(updateSuccess(data.user)); // This updates Redux and triggers the 2nd useEffect\n        setPassword(\"\");\n        setConfirmPassword(\"\");\n      } else if (res.status === 401 || res.status === 403) {\n        setError(data.message || \"Session expired. Please log in again.\");\n        dispatch(logout());\n        dispatch(clearCart());\n        navigate('/Login');\n      } else {\n        setError(data.message || \"Failed to Update Profile.\");\n      }\n    } catch (submitError) {\n      console.error(\"Update Profile Error!\", submitError);\n      setError(\"Server Error. Could not update Profile.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-message\",\n      children: \"Loading Profile.......\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 23\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success-message\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"profile-form\",\n      children: [(!loading || user && token) && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            value: name,\n            onChange: e => setName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password: (optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"confirmpassword\",\n            children: \"Confirm Password:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"confirmpassword\",\n            value: confirmPassword,\n            onChange: e => setConfirmPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"age\",\n            children: \"Age:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"age\",\n            value: age,\n            onChange: e => setAge(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"mobilenumber\",\n            children: \"Mobile Number:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"mobilenumber\",\n            value: mobilenumber,\n            onChange: e => setMobilenumber(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading || password && password !== confirmPassword,\n        children: loading ? 'Updating .....' : 'Update Profile'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 9\n  }, this);\n}\n_s(ProfileScreen, \"hyqjH/acDtTGVOJUqKHhN2zl7kA=\", false, function () {\n  return [useDispatch, useNavigate, useSelector];\n});\n_c = ProfileScreen;\nexport default ProfileScreen;\nvar _c;\n$RefreshReg$(_c, \"ProfileScreen\");","map":{"version":3,"names":["useState","useEffect","useSelector","useDispatch","updateSuccess","logout","clearCart","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","ProfileScreen","_s","dispatch","navigate","user","token","state","auth","name","setName","email","setEmail","mobilenumber","setMobilenumber","age","setAge","password","setPassword","confirmPassword","setConfirmPassword","error","setError","success","setSuccess","loading","setLoading","fetchUserProfile","res","fetch","method","headers","Authorization","data","json","ok","status","message","fetchError","console","handleSubmit","e","preventDefault","body","JSON","stringify","Number","submitError","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","required","disabled","_c","$RefreshReg$"],"sources":["C:/Users/personal/Desktop/Laraib Masood/NETSOL/e-commerce/src/Screens/ProfileScreen.js"],"sourcesContent":["import './ProfileScreen.css';\r\nimport { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { updateSuccess, logout } from '../Redux/authSlice'; // Import logout for token expiry handling\r\nimport { clearCart } from '../Redux/cartSlice'; // Assuming you clear cart on logout\r\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for redirects\r\n\r\nfunction ProfileScreen() {\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate(); // Initialize useNavigate\r\n    const { user, token } = useSelector((state) => state.auth);\r\n\r\n    // State for form fields\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [mobilenumber, setMobilenumber] = useState(\"\");\r\n    const [age, setAge] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [success, setSuccess] = useState(\"\");\r\n    const [loading, setLoading] = useState(true); // Start as true, expecting an initial fetch\r\n\r\n    // Effect 1: Fetch user profile data from the backend\r\n    useEffect(() => {\r\n        const fetchUserProfile = async () => {\r\n            if (!token) {\r\n                setError(\"No token found. Please Log in.\");\r\n                setLoading(false); // Stop loading if no token\r\n                navigate('/Login'); // Redirect to login\r\n                return;\r\n            }\r\n\r\n            // Set loading only if we are actually going to fetch\r\n            // (it's already true from initial useState)\r\n            setError(\"\");\r\n            setSuccess(\"\");\r\n\r\n            try {\r\n                const res = await fetch(\"http://localhost:5000/api/profile\", {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                });\r\n                const data = await res.json();\r\n\r\n                if (res.ok) {\r\n                    // Directly update local state with fetched data\r\n                    // NO dispatch(updateSuccess(data)) here for initial fetch\r\n                    // The second useEffect handles syncing from Redux after loginSuccess/initializeAuth\r\n                    setName(data.name || \"\");\r\n                    setEmail(data.email || \"\");\r\n                    setMobilenumber(data.mobilenumber || \"\");\r\n                    setAge(data.age || \"\");\r\n                    // No need to dispatch updateSuccess here. The local state is updated.\r\n                    // The Redux 'user' state should already have the correct data from loginSuccess\r\n                    // or initializeAuth during app load. This fetch is just to confirm/get latest.\r\n                } else if (res.status === 401 || res.status === 403) {\r\n                    setError(data.message || \"Session expired. Please log in again.\");\r\n                    dispatch(logout());\r\n                    dispatch(clearCart());\r\n                    navigate('/Login');\r\n                } else {\r\n                    setError(data.message || \"Failed to Fetch Profile\");\r\n                }\r\n            } catch (fetchError) {\r\n                console.error(\"Fetch Profile Error\", fetchError);\r\n                setError(\"Server Error. Could not Fetch Profile.\");\r\n            } finally {\r\n                setLoading(false); // Always set loading to false after fetch attempt\r\n            }\r\n        };\r\n\r\n        // This condition makes sure we only fetch if we have a token.\r\n        // It's crucial for the initial load.\r\n        // The `user` object might be populated by `authSlice` from localStorage,\r\n        // so checking `token` is sufficient for initiating the fetch.\r\n        if (token) {\r\n            fetchUserProfile();\r\n        } else {\r\n            // If component mounts and no token (should be caught by ProtectedRoute normally)\r\n            setLoading(false); // No fetch, so stop loading\r\n            setError(\"You need to be logged in to view this page.\");\r\n            navigate('/Login'); // Ensure redirection if not logged in\r\n        }\r\n    }, [token, dispatch, navigate]); // Dependencies: only token, dispatch, and navigate\r\n\r\n    // Effect 2: Synchronize local state with Redux user state\r\n    // This effect ensures that if the 'user' object in Redux (e.g., from loginSuccess)\r\n    // is updated, the form fields reflect that. It also handles the initial population\r\n    // if Redux 'user' is already available from localStorage on component mount.\r\n    useEffect(() => {\r\n        if (user) {\r\n            setName(user.name || \"\");\r\n            setEmail(user.email || \"\");\r\n            setMobilenumber(user.mobilenumber || \"\");\r\n            setAge(user.age || \"\");\r\n            setPassword(\"\");\r\n            setConfirmPassword(\"\");\r\n            // Set loading to false here if the initial user data is available\r\n            // directly from Redux without needing a fetch.\r\n            // This ensures the form is usable even before the fetchUserProfile finishes\r\n            // (or if it's skipped for some reason).\r\n            setLoading(false); // Assuming user data is here, we are ready\r\n        }\r\n    }, [user]); // Only depends on the Redux 'user' object\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError(\"\");\r\n        setSuccess(\"\");\r\n        setLoading(true);\r\n\r\n        if (password && password !== confirmPassword) { // Only check if password is provided\r\n            setError(\"Password fields do not match.\");\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const res = await fetch('http://localhost:5000/api/profile', {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify({\r\n                    name,\r\n                    email,\r\n                    mobilenumber,\r\n                    age: Number(age),\r\n                    ...(password && { password }),\r\n                }),\r\n            });\r\n            const data = await res.json();\r\n\r\n            if (res.ok) {\r\n                setSuccess(data.message || 'Profile Updated Successfully!');\r\n                // IMPORTANT: Dispatch updateSuccess HERE after successful backend update\r\n                dispatch(updateSuccess(data.user)); // This updates Redux and triggers the 2nd useEffect\r\n                setPassword(\"\");\r\n                setConfirmPassword(\"\");\r\n            } else if (res.status === 401 || res.status === 403) {\r\n                setError(data.message || \"Session expired. Please log in again.\");\r\n                dispatch(logout());\r\n                dispatch(clearCart());\r\n                navigate('/Login');\r\n            } else {\r\n                setError(data.message || \"Failed to Update Profile.\");\r\n            }\r\n        } catch (submitError) {\r\n            console.error(\"Update Profile Error!\", submitError);\r\n            setError(\"Server Error. Could not update Profile.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"profile-container\">\r\n            <h2>User Profile</h2>\r\n            {/* Show loading message only when actually loading/updating */}\r\n            {loading && <p className=\"loading-message\">Loading Profile.......</p>}\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            {success && <p className=\"success-message\">{success}</p>}\r\n\r\n            <form onSubmit={handleSubmit} className=\"profile-form\">\r\n                {/* Render fields only if not actively loading from backend,\r\n                    or if initial data is available. This prevents flickering. */}\r\n                {(!loading || (user && token)) && (\r\n                    <>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"name\">Name:</label>\r\n                            <input type=\"text\" id=\"name\" value={name} onChange={(e) => setName(e.target.value)} required />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email\">Email:</label>\r\n                            <input type=\"email\" id=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\">Password: (optional)</label>\r\n                            <input type=\"password\" id=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"confirmpassword\">Confirm Password:</label>\r\n                            <input type=\"password\" id=\"confirmpassword\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"age\">Age:</label>\r\n                            <input type=\"number\" id=\"age\" value={age} onChange={(e) => setAge(e.target.value)} required />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"mobilenumber\">Mobile Number:</label>\r\n                            <input type=\"text\" id=\"mobilenumber\" value={mobilenumber} onChange={(e) => setMobilenumber(e.target.value)} required />\r\n                        </div>\r\n                    </>\r\n                )}\r\n                <button type=\"submit\" disabled={loading || (password && password !== confirmPassword)}>\r\n                    {loading ? 'Updating .....' : 'Update Profile'}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}