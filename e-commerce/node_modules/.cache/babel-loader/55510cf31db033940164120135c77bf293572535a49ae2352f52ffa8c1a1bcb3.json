{"ast":null,"code":"// src/Redux/cartSlice.js\n\nimport { createSlice } from '@reduxjs/toolkit';\n\n// Function to safely get cart from localStorage for initial state\nconst getInitialCartState = () => {\n  try {\n    const storedCart = localStorage.getItem('cart');\n    if (storedCart) {\n      const parsedCart = JSON.parse(storedCart);\n      if (Array.isArray(parsedCart)) {\n        return parsedCart.map(item => ({\n          ...item,\n          price: parseFloat(String(item.price).replace('$', '')) || 0,\n          quantity: parseInt(item.quantity) || 1\n        }));\n      }\n    }\n  } catch (e) {\n    console.error(\"Failed to parse cart from localStorage on initialization:\", e);\n  }\n  return []; // Default to empty array if no valid data\n};\n\n// Function to safely get total purchases from localStorage for initial state\nconst getInitialTotalPurchasesState = () => {\n  try {\n    const storedPurchases = localStorage.getItem('TotalPurchase'); // Corrected key based on your original code\n    return storedPurchases ? parseInt(storedPurchases, 10) : 0;\n  } catch (e) {\n    console.error(\"Failed to parse TotalPurchase from localStorage on initialization:\", e);\n  }\n  return 0; // Default to 0\n};\nconst initialState = {\n  items: getInitialCartState(),\n  // Array of cart items\n  totalPurchases: getInitialTotalPurchasesState() // Total purchases count\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  // Name of this slice\n  initialState,\n  reducers: {\n    // Action to add a product to the cart or increment its quantity\n    addToCart: (state, action) => {\n      const productToAdd = action.payload; // productToAdd will be the full product object\n      const existingItemIndex = state.items.findIndex(item => item.id === productToAdd.id);\n      if (existingItemIndex > -1) {\n        // If item exists, increment quantity of the existing item\n        state.items[existingItemIndex].quantity += 1;\n      } else {\n        // If item is new, add it to the cart with quantity 1\n        const newItem = {\n          id: productToAdd.id,\n          image: productToAdd.image,\n          name: productToAdd.name,\n          description: productToAdd.description,\n          price: parseFloat(String(productToAdd.price).replace('$', '')),\n          // Clean price before adding\n          quantity: 1\n        };\n        state.items.push(newItem);\n      }\n      // Synchronize with localStorage immediately after state change\n      localStorage.setItem('cart', JSON.stringify(state.items));\n    },\n    // Action to remove a product from the cart by its ID\n    removeFromCart: (state, action) => {\n      const idToRemove = action.payload; // payload is the item's ID\n      state.items = state.items.filter(item => item.id !== idToRemove);\n      // Synchronize with localStorage\n      localStorage.setItem('cart', JSON.stringify(state.items));\n    },\n    // Action to update the quantity of a specific item\n    updateQuantity: (state, action) => {\n      const {\n        id,\n        newQty\n      } = action.payload; // payload is an object { id: item_id, newQty: new_quantity }\n      const quantity = Math.max(1, parseInt(newQty, 10) || 1); // Ensure valid quantity (min 1)\n\n      state.items = state.items.map(item => item.id === id ? {\n        ...item,\n        quantity: quantity\n      } : item);\n      // Synchronize with localStorage\n      localStorage.setItem('cart', JSON.stringify(state.items));\n    },\n    // Action to increment the total purchases count (purely client-side for now)\n    incrementTotalPurchases: state => {\n      state.totalPurchases += 1;\n      // Synchronize with localStorage\n      localStorage.setItem('TotalPurchase', state.totalPurchases.toString());\n    },\n    clearCart: state => {\n      state.items = [];\n      state.totalPurchases = 0;\n      localStorage.removeItem('cart');\n      localStorage.removeItem('TotalPurchase');\n    }\n  }\n});\n\n// Export the generated action creators\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  incrementTotalPurchases,\n  clearCart\n} = cartSlice.actions;\n\n// Export the reducer as default\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","getInitialCartState","storedCart","localStorage","getItem","parsedCart","JSON","parse","Array","isArray","map","item","price","parseFloat","String","replace","quantity","parseInt","e","console","error","getInitialTotalPurchasesState","storedPurchases","initialState","items","totalPurchases","cartSlice","name","reducers","addToCart","state","action","productToAdd","payload","existingItemIndex","findIndex","id","newItem","image","description","push","setItem","stringify","removeFromCart","idToRemove","filter","updateQuantity","newQty","Math","max","incrementTotalPurchases","toString","clearCart","removeItem","actions","reducer"],"sources":["C:/Users/personal/Desktop/Laraib Masood/NETSOL/e-commerce/src/Redux/cartSlice.js"],"sourcesContent":["// src/Redux/cartSlice.js\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\n// Function to safely get cart from localStorage for initial state\r\nconst getInitialCartState = () => {\r\n  try {\r\n    const storedCart = localStorage.getItem('cart');\r\n    if (storedCart) {\r\n      const parsedCart = JSON.parse(storedCart);\r\n      if (Array.isArray(parsedCart)) {\r\n        return parsedCart.map(item => ({\r\n          ...item,\r\n          price: parseFloat(String(item.price).replace('$', '')) || 0,\r\n          quantity: parseInt(item.quantity) || 1\r\n        }));\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Failed to parse cart from localStorage on initialization:\", e);\r\n  }\r\n  return []; // Default to empty array if no valid data\r\n};\r\n\r\n// Function to safely get total purchases from localStorage for initial state\r\nconst getInitialTotalPurchasesState = () => {\r\n  try {\r\n    const storedPurchases = localStorage.getItem('TotalPurchase'); // Corrected key based on your original code\r\n    return storedPurchases ? parseInt(storedPurchases, 10) : 0;\r\n  } catch (e) {\r\n    console.error(\"Failed to parse TotalPurchase from localStorage on initialization:\", e);\r\n  }\r\n  return 0; // Default to 0\r\n};\r\n\r\nconst initialState = {\r\n  items: getInitialCartState(),         // Array of cart items\r\n  totalPurchases: getInitialTotalPurchasesState(), // Total purchases count\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart', // Name of this slice\r\n  initialState,\r\n  reducers: {\r\n    // Action to add a product to the cart or increment its quantity\r\n    addToCart: (state, action) => {\r\n      const productToAdd = action.payload; // productToAdd will be the full product object\r\n      const existingItemIndex = state.items.findIndex(item => item.id === productToAdd.id);\r\n\r\n      if (existingItemIndex > -1) {\r\n        // If item exists, increment quantity of the existing item\r\n        state.items[existingItemIndex].quantity += 1;\r\n      } else {\r\n        // If item is new, add it to the cart with quantity 1\r\n        const newItem = {\r\n          id: productToAdd.id,\r\n          image: productToAdd.image,\r\n          name: productToAdd.name,\r\n          description: productToAdd.description,\r\n          price: parseFloat(String(productToAdd.price).replace('$', '')), // Clean price before adding\r\n          quantity: 1\r\n        };\r\n        state.items.push(newItem);\r\n      }\r\n      // Synchronize with localStorage immediately after state change\r\n      localStorage.setItem('cart', JSON.stringify(state.items));\r\n    },\r\n\r\n    // Action to remove a product from the cart by its ID\r\n    removeFromCart: (state, action) => {\r\n      const idToRemove = action.payload; // payload is the item's ID\r\n      state.items = state.items.filter(item => item.id !== idToRemove);\r\n      // Synchronize with localStorage\r\n      localStorage.setItem('cart', JSON.stringify(state.items));\r\n    },\r\n\r\n    // Action to update the quantity of a specific item\r\n    updateQuantity: (state, action) => {\r\n      const { id, newQty } = action.payload; // payload is an object { id: item_id, newQty: new_quantity }\r\n      const quantity = Math.max(1, parseInt(newQty, 10) || 1); // Ensure valid quantity (min 1)\r\n\r\n      state.items = state.items.map(item =>\r\n        item.id === id ? { ...item, quantity: quantity } : item\r\n      );\r\n      // Synchronize with localStorage\r\n      localStorage.setItem('cart', JSON.stringify(state.items));\r\n    },\r\n\r\n    // Action to increment the total purchases count (purely client-side for now)\r\n    incrementTotalPurchases: (state) => {\r\n      state.totalPurchases += 1;\r\n      // Synchronize with localStorage\r\n      localStorage.setItem('TotalPurchase', state.totalPurchases.toString());\r\n    },\r\n    clearCart: (state)=>{\r\n      state.items = [];\r\n      state.totalPurchases = 0;\r\n      localStorage.removeItem('cart');\r\n      localStorage.removeItem('TotalPurchase')\r\n    }\r\n  },\r\n});\r\n\r\n// Export the generated action creators\r\nexport const { addToCart, removeFromCart, updateQuantity, incrementTotalPurchases, clearCart } = cartSlice.actions;\r\n\r\n// Export the reducer as default\r\nexport default cartSlice.reducer;"],"mappings":"AAAA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAChC,IAAI;IACF,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACd,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;MACzC,IAAIM,KAAK,CAACC,OAAO,CAACJ,UAAU,CAAC,EAAE;QAC7B,OAAOA,UAAU,CAACK,GAAG,CAACC,IAAI,KAAK;UAC7B,GAAGA,IAAI;UACPC,KAAK,EAAEC,UAAU,CAACC,MAAM,CAACH,IAAI,CAACC,KAAK,CAAC,CAACG,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC;UAC3DC,QAAQ,EAAEC,QAAQ,CAACN,IAAI,CAACK,QAAQ,CAAC,IAAI;QACvC,CAAC,CAAC,CAAC;MACL;IACF;EACF,CAAC,CAAC,OAAOE,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,2DAA2D,EAAEF,CAAC,CAAC;EAC/E;EACA,OAAO,EAAE,CAAC,CAAC;AACb,CAAC;;AAED;AACA,MAAMG,6BAA6B,GAAGA,CAAA,KAAM;EAC1C,IAAI;IACF,MAAMC,eAAe,GAAGnB,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;IAC/D,OAAOkB,eAAe,GAAGL,QAAQ,CAACK,eAAe,EAAE,EAAE,CAAC,GAAG,CAAC;EAC5D,CAAC,CAAC,OAAOJ,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,oEAAoE,EAAEF,CAAC,CAAC;EACxF;EACA,OAAO,CAAC,CAAC,CAAC;AACZ,CAAC;AAED,MAAMK,YAAY,GAAG;EACnBC,KAAK,EAAEvB,mBAAmB,CAAC,CAAC;EAAU;EACtCwB,cAAc,EAAEJ,6BAA6B,CAAC,CAAC,CAAE;AACnD,CAAC;AAED,MAAMK,SAAS,GAAG1B,WAAW,CAAC;EAC5B2B,IAAI,EAAE,MAAM;EAAE;EACdJ,YAAY;EACZK,QAAQ,EAAE;IACR;IACAC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5B,MAAMC,YAAY,GAAGD,MAAM,CAACE,OAAO,CAAC,CAAC;MACrC,MAAMC,iBAAiB,GAAGJ,KAAK,CAACN,KAAK,CAACW,SAAS,CAACxB,IAAI,IAAIA,IAAI,CAACyB,EAAE,KAAKJ,YAAY,CAACI,EAAE,CAAC;MAEpF,IAAIF,iBAAiB,GAAG,CAAC,CAAC,EAAE;QAC1B;QACAJ,KAAK,CAACN,KAAK,CAACU,iBAAiB,CAAC,CAAClB,QAAQ,IAAI,CAAC;MAC9C,CAAC,MAAM;QACL;QACA,MAAMqB,OAAO,GAAG;UACdD,EAAE,EAAEJ,YAAY,CAACI,EAAE;UACnBE,KAAK,EAAEN,YAAY,CAACM,KAAK;UACzBX,IAAI,EAAEK,YAAY,CAACL,IAAI;UACvBY,WAAW,EAAEP,YAAY,CAACO,WAAW;UACrC3B,KAAK,EAAEC,UAAU,CAACC,MAAM,CAACkB,YAAY,CAACpB,KAAK,CAAC,CAACG,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;UAAE;UAChEC,QAAQ,EAAE;QACZ,CAAC;QACDc,KAAK,CAACN,KAAK,CAACgB,IAAI,CAACH,OAAO,CAAC;MAC3B;MACA;MACAlC,YAAY,CAACsC,OAAO,CAAC,MAAM,EAAEnC,IAAI,CAACoC,SAAS,CAACZ,KAAK,CAACN,KAAK,CAAC,CAAC;IAC3D,CAAC;IAED;IACAmB,cAAc,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAMa,UAAU,GAAGb,MAAM,CAACE,OAAO,CAAC,CAAC;MACnCH,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACqB,MAAM,CAAClC,IAAI,IAAIA,IAAI,CAACyB,EAAE,KAAKQ,UAAU,CAAC;MAChE;MACAzC,YAAY,CAACsC,OAAO,CAAC,MAAM,EAAEnC,IAAI,CAACoC,SAAS,CAACZ,KAAK,CAACN,KAAK,CAAC,CAAC;IAC3D,CAAC;IAED;IACAsB,cAAc,EAAEA,CAAChB,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAM;QAAEK,EAAE;QAAEW;MAAO,CAAC,GAAGhB,MAAM,CAACE,OAAO,CAAC,CAAC;MACvC,MAAMjB,QAAQ,GAAGgC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEhC,QAAQ,CAAC8B,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;MAEzDjB,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACd,GAAG,CAACC,IAAI,IAChCA,IAAI,CAACyB,EAAE,KAAKA,EAAE,GAAG;QAAE,GAAGzB,IAAI;QAAEK,QAAQ,EAAEA;MAAS,CAAC,GAAGL,IACrD,CAAC;MACD;MACAR,YAAY,CAACsC,OAAO,CAAC,MAAM,EAAEnC,IAAI,CAACoC,SAAS,CAACZ,KAAK,CAACN,KAAK,CAAC,CAAC;IAC3D,CAAC;IAED;IACA0B,uBAAuB,EAAGpB,KAAK,IAAK;MAClCA,KAAK,CAACL,cAAc,IAAI,CAAC;MACzB;MACAtB,YAAY,CAACsC,OAAO,CAAC,eAAe,EAAEX,KAAK,CAACL,cAAc,CAAC0B,QAAQ,CAAC,CAAC,CAAC;IACxE,CAAC;IACDC,SAAS,EAAGtB,KAAK,IAAG;MAClBA,KAAK,CAACN,KAAK,GAAG,EAAE;MAChBM,KAAK,CAACL,cAAc,GAAG,CAAC;MACxBtB,YAAY,CAACkD,UAAU,CAAC,MAAM,CAAC;MAC/BlD,YAAY,CAACkD,UAAU,CAAC,eAAe,CAAC;IAC1C;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAExB,SAAS;EAAEc,cAAc;EAAEG,cAAc;EAAEI,uBAAuB;EAAEE;AAAU,CAAC,GAAG1B,SAAS,CAAC4B,OAAO;;AAElH;AACA,eAAe5B,SAAS,CAAC6B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}