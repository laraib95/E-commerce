{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\personal\\\\Desktop\\\\Laraib Masood\\\\NETSOL\\\\e-commerce\\\\src\\\\Screens\\\\Loginscreen.js\",\n  _s = $RefreshSig$();\n// Import for Google Login\n// import { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport { useState } from \"react\"; // Imports React and the useState hook for managing component state\n// import googlelogo from '../Images/googleicon.png' // Imports the Google logo image\nimport './Loginscreen.css'; // Imports the CSS file for styling the LoginScreen component\nimport { useNavigate } from \"react-router-dom\";\n\n//Redux Imports\n\nimport { loginSuccess } from '../Redux/authSlice';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginScreen() {\n  _s();\n  // Declares state variables using the useState hook\n  const [email, setemail] = useState(\"\"); // State for storing the email input value\n  const [password, setpassword] = useState(\"\"); // State for storing the password input value\n  const [error, seterror] = useState(\"\"); // State for storing error messages\n  // const [loggedin, setloggedin] = useState(false); // State for tracking login status\n  const navigate = useNavigate(); //initialize useNavigate hook\n  const dispatch = useDispatch(); //initialize useDispatch hook\n\n  // Function to validate email format using a regular expression\n  const validateEmail = email => {\n    const re = /\\S+@\\S+\\.\\S+/; // Regular expression for basic email validation\n    return re.test(email); // Returns true if the email matches the pattern, false otherwise\n  };\n\n  // Handler function for form submission\n  const handleSubmit = async event => {\n    event.preventDefault(); // Prevents the default form submission behavior (page reload)\n    seterror(\" \");\n\n    // Checks if both email and password fields are empty\n    if (!email || !password) {\n      seterror(\"Both Fields are required!\"); // Sets an error message\n      return; // Stops the function execution\n    }\n\n    // Checks if the email format is invalid\n    if (!validateEmail(email)) {\n      seterror(\"Invalid Email Format!\"); // Sets an error message for invalid email\n      return; // Stops the function execution\n    }\n\n    // // Checks if the entered email and password match the hardcoded values\n    // const savedUser = JSON.parse(localStorage.getItem('user'));\n    // if (savedUser && savedUser.email === email && savedUser.password === password) {\n    //     setloggedin(true);\n    //     seterror(\"\");\n    //     navigate('/');\n    // }\n    // else {\n    //     seterror(\"Invald Email or Password\"); // Sets an error message for incorrect credentials\n    // }\n\n    //API POST request to backend\n    try {\n      const response = await fetch(\"http://localhost:5000/api/login\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json(); //parse the response json\n      if (response.ok) {\n        alert(\"Logged in Successfuly !\");\n        //Dispatch the  LoginSuccess action with User data and token from backend \n        dispatch(loginSuccess({\n          user: data.user,\n          token: data.token\n        }));\n        seterror(\" \");\n        navigate('/');\n      } else {\n        seterror(data.message || \"Login  Failed\");\n      }\n    } catch (error) {\n      console.error(error);\n      seterror(\"Server Error. Please Try Again later\");\n    }\n  };\n\n  // // --- Google Login Handlers ---\n  // const handleGoogleSuccess = (credentialResponse) => {\n  //     console.log('Google Login Success:', credentialResponse);\n  //     // Here you would typically send credentialResponse.credential (ID token) to your backend\n  //     // to verify the user and create/retrieve their account.\n  //     const decodedToken = JSON.parse(atob(credentialResponse.credential.split('.')[1]));\n  //     const userProfile = {\n  //         name: decodedToken.name,\n  //         email: decodedToken.email,\n  //         profilePic: decodedToken.picture // Google profile picture URL\n  //     };\n  //     dispatch(loginSuccess({ user: userProfile, token: credentialResponse.credential })); // Dispatch with Google data\n  //     seterror(\"\");\n  //     navigate('/');\n  // };\n\n  // const handleGoogleError = () => {\n  //     console.log('Google Login Failed');\n  //     seterror(\"Google login failed. Please try again.\");\n  // };\n\n  // JSX for rendering the LoginScreen component\n  return (\n    /*#__PURE__*/\n    // <GoogleOAuthProvider clientId=\"908949675200-kthv4j93e3qhthl24f6b8lq5d7lgien8.apps.googleusercontent.com\"> {/* Wrap with GoogleOAuthProvider */}\n    _jsxDEV(\"div\", {\n      className: \"Loginwrapper\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login to Shop please\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputs\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"emailpassword\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"Email\",\n              type: \"email\",\n              placeholder: \"enter your email\",\n              value: email,\n              onChange: e => setemail(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"enter the password\",\n              value: password,\n              onChange: e => setpassword(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 35\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"  Don't have account ? Register here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formbuttons\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"signup-button\",\n              type: \"button\",\n              onClick: () => navigate('/Signupscreen'),\n              children: \"Sign up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"login-button\",\n              type: \"submit\",\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)\n    // </GoogleOAuthProvider >\n  );\n}\n_s(LoginScreen, \"U5bpZzQWxZfAEnrICTYDPhuMDOk=\", false, function () {\n  return [useNavigate, useDispatch];\n});\n_c = LoginScreen;\nexport default LoginScreen; // Exports the LoginScreen component as the default export\nvar _c;\n$RefreshReg$(_c, \"LoginScreen\");","map":{"version":3,"names":["useState","useNavigate","loginSuccess","useDispatch","jsxDEV","_jsxDEV","LoginScreen","_s","email","setemail","password","setpassword","error","seterror","navigate","dispatch","validateEmail","re","test","handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","alert","user","token","message","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","e","target","required","style","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/personal/Desktop/Laraib Masood/NETSOL/e-commerce/src/Screens/Loginscreen.js"],"sourcesContent":["// Import for Google Login\r\n// import { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\r\nimport { useState } from \"react\"; // Imports React and the useState hook for managing component state\r\n// import googlelogo from '../Images/googleicon.png' // Imports the Google logo image\r\nimport './Loginscreen.css'; // Imports the CSS file for styling the LoginScreen component\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//Redux Imports\r\n\r\nimport { loginSuccess } from '../Redux/authSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nfunction LoginScreen() {\r\n    // Declares state variables using the useState hook\r\n    const [email, setemail] = useState(\"\"); // State for storing the email input value\r\n    const [password, setpassword] = useState(\"\"); // State for storing the password input value\r\n    const [error, seterror] = useState(\"\"); // State for storing error messages\r\n    // const [loggedin, setloggedin] = useState(false); // State for tracking login status\r\n    const navigate = useNavigate();                 //initialize useNavigate hook\r\n    const dispatch = useDispatch();                 //initialize useDispatch hook\r\n\r\n    // Function to validate email format using a regular expression\r\n    const validateEmail = (email) => {\r\n        const re = /\\S+@\\S+\\.\\S+/; // Regular expression for basic email validation\r\n        return re.test(email); // Returns true if the email matches the pattern, false otherwise\r\n    }\r\n\r\n    // Handler function for form submission\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault(); // Prevents the default form submission behavior (page reload)\r\n        seterror(\" \");\r\n\r\n        // Checks if both email and password fields are empty\r\n        if (!email || !password) {\r\n            seterror(\"Both Fields are required!\"); // Sets an error message\r\n            return; // Stops the function execution\r\n        }\r\n\r\n        // Checks if the email format is invalid\r\n        if (!validateEmail(email)) {\r\n            seterror(\"Invalid Email Format!\"); // Sets an error message for invalid email\r\n            return; // Stops the function execution\r\n        }\r\n\r\n        // // Checks if the entered email and password match the hardcoded values\r\n        // const savedUser = JSON.parse(localStorage.getItem('user'));\r\n        // if (savedUser && savedUser.email === email && savedUser.password === password) {\r\n        //     setloggedin(true);\r\n        //     seterror(\"\");\r\n        //     navigate('/');\r\n        // }\r\n        // else {\r\n        //     seterror(\"Invald Email or Password\"); // Sets an error message for incorrect credentials\r\n        // }\r\n\r\n        //API POST request to backend\r\n        try {\r\n            const response = await\r\n                fetch(\"http://localhost:5000/api/login\", {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n\r\n                    },\r\n                    body: JSON.stringify({ email, password }),\r\n                });\r\n            const data = await response.json();             //parse the response json\r\n            if (response.ok ) {\r\n                alert(\"Logged in Successfuly !\");\r\n                //Dispatch the  LoginSuccess action with User data and token from backend \r\n                dispatch(loginSuccess({\r\n                    user: data.user,\r\n                    token: data.token\r\n                }));\r\n                seterror(\" \");\r\n                navigate('/');\r\n            }\r\n            else {\r\n                seterror(data.message || \"Login  Failed\");\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            seterror(\"Server Error. Please Try Again later\")\r\n        }\r\n    };\r\n\r\n    // // --- Google Login Handlers ---\r\n    // const handleGoogleSuccess = (credentialResponse) => {\r\n    //     console.log('Google Login Success:', credentialResponse);\r\n    //     // Here you would typically send credentialResponse.credential (ID token) to your backend\r\n    //     // to verify the user and create/retrieve their account.\r\n    //     const decodedToken = JSON.parse(atob(credentialResponse.credential.split('.')[1]));\r\n    //     const userProfile = {\r\n    //         name: decodedToken.name,\r\n    //         email: decodedToken.email,\r\n    //         profilePic: decodedToken.picture // Google profile picture URL\r\n    //     };\r\n    //     dispatch(loginSuccess({ user: userProfile, token: credentialResponse.credential })); // Dispatch with Google data\r\n    //     seterror(\"\");\r\n    //     navigate('/');\r\n    // };\r\n\r\n    // const handleGoogleError = () => {\r\n    //     console.log('Google Login Failed');\r\n    //     seterror(\"Google login failed. Please try again.\");\r\n    // };\r\n\r\n\r\n    // JSX for rendering the LoginScreen component\r\n    return (\r\n        // <GoogleOAuthProvider clientId=\"908949675200-kthv4j93e3qhthl24f6b8lq5d7lgien8.apps.googleusercontent.com\"> {/* Wrap with GoogleOAuthProvider */}\r\n            <div className=\"Loginwrapper\"> {/* Main container for the login screen */}\r\n                <h1>Login to Shop please</h1> {/* Heading for the login page */}\r\n                <div className=\"inputs\"> {/* Container for input fields and buttons */}\r\n                    <form onSubmit={handleSubmit}> {/* Login form with submission handler */}\r\n                        <div className=\"emailpassword\"> {/* Container for email and password input fields */}\r\n                            <label>Email</label> {/* Label for the email input */}\r\n                            <input className=\"Email\" type=\"email\" placeholder=\"enter your email\" value={email}\r\n                                onChange={(e) => setemail(e.target.value)} required></input> {/* Email input field */}\r\n                            <label>Password</label> {/* Label for the password input */}\r\n                            <input type=\"password\" placeholder=\"enter the password\" value={password}\r\n                                onChange={(e) => setpassword(e.target.value)} required></input> {/* Password input field */}\r\n                        </div>\r\n                        {error && <p style={{ color: \"red\" }}>{error}</p>} {/* Displays error message if `error` state is not empty */}\r\n                        <p>  Don't have account ? Register here</p>\r\n                        <div className=\"formbuttons\"> {/* Container for form action buttons */}\r\n                            <button className='signup-button' type=\"button\" onClick={() => navigate('/Signupscreen')}>Sign up</button> {/* Sign up button (currently not functional as a separate route) */}\r\n                            <button className='login-button' type=\"submit\">Login</button> {/* Login button to submit the form */}\r\n                        </div>\r\n                        {/* <div class=\"separator\">\r\n                            <span class=\"text\">OR</span>\r\n                        </div>\r\n                        <div className=\"social-login\"> {/* Container for social login  */}\r\n                            {/* Google Login Button \r\n                            <GoogleLogin\r\n                                onSuccess={handleGoogleSuccess}\r\n                                onError={handleGoogleError}\r\n                                useOneTap // Optional: for one-tap sign-in experience\r\n                                render={({ onClick }) => (\r\n                                    <button type=\"button\" onClick={onClick} className=\"googlebutton\">\r\n                                        <img src={googlelogo} alt=\"Googlelogo\" /> Login with Google\r\n                                    </button>\r\n                                )}\r\n                            />\r\n                        </div> */}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        // </GoogleOAuthProvider >\r\n    );\r\n}\r\nexport default LoginScreen; // Exports the LoginScreen component as the default export"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}