{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\personal\\\\Desktop\\\\Laraib Masood\\\\NETSOL\\\\e-commerce\\\\src\\\\Components\\\\Admin\\\\AdminProtectedRoute.js\",\n  _s = $RefreshSig$();\n//protected route specifically for admin operations checking admin role.\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminProtectedRoute = () => {\n  _s();\n  const {\n    isLoggedIn,\n    user,\n    status\n  } = useSelector(state => state.auth);\n\n  // Check if logged in, user exists, and user has the 'Admin' role\n  if (isLoggedIn && user && user.role === 'Admin') {\n    return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 16\n    }, this); // Render child routes if admin\n  } else if (status === 'loading') {\n    // Optional: Show a loading spinner while auth state is being determined\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Checking authorization...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }, this);\n  } else {\n    // Redirect to login if not logged in or not admin\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/Login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, this);\n  }\n};\n_s(AdminProtectedRoute, \"2opCA2ovg9Q4dlAJ2Ca6EOIljyM=\", false, function () {\n  return [useSelector];\n});\n_c = AdminProtectedRoute;\nexport default AdminProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminProtectedRoute\");","map":{"version":3,"names":["React","useSelector","Navigate","Outlet","jsxDEV","_jsxDEV","AdminProtectedRoute","_s","isLoggedIn","user","status","state","auth","role","fileName","_jsxFileName","lineNumber","columnNumber","children","to","replace","_c","$RefreshReg$"],"sources":["C:/Users/personal/Desktop/Laraib Masood/NETSOL/e-commerce/src/Components/Admin/AdminProtectedRoute.js"],"sourcesContent":["//protected route specifically for admin operations checking admin role.\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\n\r\nconst AdminProtectedRoute = () => {\r\n    const { isLoggedIn, user, status } = useSelector((state) => state.auth);\r\n\r\n    // Check if logged in, user exists, and user has the 'Admin' role\r\n    if (isLoggedIn && user && user.role === 'Admin') {\r\n        return <Outlet />; // Render child routes if admin\r\n    } else if (status === 'loading') {\r\n        // Optional: Show a loading spinner while auth state is being determined\r\n        return <p>Checking authorization...</p>;\r\n    } else {\r\n        // Redirect to login if not logged in or not admin\r\n        return <Navigate to=\"/Login\" replace />;\r\n    }\r\n};\r\n\r\nexport default AdminProtectedRoute;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM;IAAEC,UAAU;IAAEC,IAAI;IAAEC;EAAO,CAAC,GAAGT,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;;EAEvE;EACA,IAAIJ,UAAU,IAAIC,IAAI,IAAIA,IAAI,CAACI,IAAI,KAAK,OAAO,EAAE;IAC7C,oBAAOR,OAAA,CAACF,MAAM;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC,CAAC;EACvB,CAAC,MAAM,IAAIP,MAAM,KAAK,SAAS,EAAE;IAC7B;IACA,oBAAOL,OAAA;MAAAa,QAAA,EAAG;IAAyB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC3C,CAAC,MAAM;IACH;IACA,oBAAOZ,OAAA,CAACH,QAAQ;MAACiB,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC3C;AACJ,CAAC;AAACV,EAAA,CAbID,mBAAmB;EAAA,QACgBL,WAAW;AAAA;AAAAoB,EAAA,GAD9Cf,mBAAmB;AAezB,eAAeA,mBAAmB;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}