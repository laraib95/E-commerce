{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst getInitialAuthState = () => {\n  const token = localStorage.getItem('userToken');\n  const userProfile = localStorage.getItem('userProfile');\n  if (token && userProfile) try {\n    const parsedUserProfile = JSON.parse(userProfile);\n    return {\n      isLoggedIn: true,\n      user: parsedUserProfile,\n      token: token\n    };\n  } catch (error) {\n    console.error('Failed to Parse  User Profile ', error);\n    localStorage.removeItem('userToken');\n    localStorage.removeItem('userProfile');\n    return {\n      isLoggedIn: false,\n      user: 'null',\n      token: 'null'\n    };\n  }\n  return {\n    isLoggedIn: false,\n    user: null,\n    token: null\n  };\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  //name of slice used in action types\n  initialState: getInitialAuthState(),\n  reducers: {\n    //reducer for successful login\n    loginSuccess: (state, action) => {\n      state.isLoggedIn = true;\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      localStorage.setItem('userToken', action.payload.token);\n      localStorage.setItem('userProfile', JSON.stringify(action.payload.user));\n    },\n    //reducer for logout\n    logout: state => {\n      state.isLoggedIn = false;\n      state.user = null;\n      state.token = null;\n      //clean from localstorage\n      localStorage.removeItem('userToken');\n      localStorage.removeItem('userProfile');\n    },\n    //reducer for updating the User Profile \n    updateSuccess: (state, action) => {\n      state.user = action.payload; //Backend sends back the updated user Object\n      localStorage.setItem('userData', JSON.stringify(action.payload));\n    }\n  }\n});\n//exports all actions\nexport const {\n  loginSuccess,\n  logout,\n  updateSuccess\n} = authSlice.actions;\nexport default authSlice.reducer; //export reducers as default","map":{"version":3,"names":["createSlice","getInitialAuthState","token","localStorage","getItem","userProfile","parsedUserProfile","JSON","parse","isLoggedIn","user","error","console","removeItem","authSlice","name","initialState","reducers","loginSuccess","state","action","payload","setItem","stringify","logout","updateSuccess","actions","reducer"],"sources":["C:/Users/personal/Desktop/Laraib Masood/NETSOL/e-commerce/src/Redux/authSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nconst getInitialAuthState = () => {\r\n    const token = localStorage.getItem('userToken');\r\n    const userProfile = localStorage.getItem('userProfile');\r\n    if (token && userProfile)\r\n        try {\r\n            const parsedUserProfile = JSON.parse(userProfile);\r\n            return {\r\n                isLoggedIn: true,\r\n                user: parsedUserProfile,\r\n                token: token\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to Parse  User Profile ', error)\r\n            localStorage.removeItem('userToken');\r\n            localStorage.removeItem('userProfile');\r\n            return {\r\n                isLoggedIn: false,\r\n                user: 'null',\r\n                token: 'null'\r\n            };\r\n        }\r\n    return {\r\n        isLoggedIn: false,\r\n        user: null,\r\n        token: null\r\n    };\r\n}\r\nconst authSlice = createSlice({\r\n    name: 'auth',      //name of slice used in action types\r\n    initialState: getInitialAuthState(),\r\n    reducers: {\r\n        //reducer for successful login\r\n        loginSuccess: (state, action) => {\r\n            state.isLoggedIn = true;\r\n            state.user = action.payload.user;\r\n            state.token = action.payload.token\r\n\r\n            localStorage.setItem('userToken', action.payload.token);\r\n            localStorage.setItem('userProfile', JSON.stringify(action.payload.user));\r\n        },\r\n        //reducer for logout\r\n        logout: (state) => {\r\n            state.isLoggedIn = false;\r\n            state.user = null;\r\n            state.token = null;\r\n            //clean from localstorage\r\n            localStorage.removeItem('userToken');\r\n            localStorage.removeItem('userProfile');\r\n        },\r\n        //reducer for updating the User Profile \r\n        updateSuccess: (state, action) => {\r\n            state.user = action.payload;        //Backend sends back the updated user Object\r\n            localStorage.setItem('userData', JSON.stringify(action.payload));\r\n        },\r\n    },\r\n});\r\n//exports all actions\r\nexport const { loginSuccess, logout, updateSuccess } = authSlice.actions;\r\nexport default authSlice.reducer;   //export reducers as default"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAC9B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,MAAMC,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACvD,IAAIF,KAAK,IAAIG,WAAW,EACpB,IAAI;IACA,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAK,CAACH,WAAW,CAAC;IACjD,OAAO;MACHI,UAAU,EAAE,IAAI;MAChBC,IAAI,EAAEJ,iBAAiB;MACvBJ,KAAK,EAAEA;IACX,CAAC;EACL,CAAC,CAAC,OAAOS,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtDR,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC;IACpCV,YAAY,CAACU,UAAU,CAAC,aAAa,CAAC;IACtC,OAAO;MACHJ,UAAU,EAAE,KAAK;MACjBC,IAAI,EAAE,MAAM;MACZR,KAAK,EAAE;IACX,CAAC;EACL;EACJ,OAAO;IACHO,UAAU,EAAE,KAAK;IACjBC,IAAI,EAAE,IAAI;IACVR,KAAK,EAAE;EACX,CAAC;AACL,CAAC;AACD,MAAMY,SAAS,GAAGd,WAAW,CAAC;EAC1Be,IAAI,EAAE,MAAM;EAAO;EACnBC,YAAY,EAAEf,mBAAmB,CAAC,CAAC;EACnCgB,QAAQ,EAAE;IACN;IACAC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACV,UAAU,GAAG,IAAI;MACvBU,KAAK,CAACT,IAAI,GAAGU,MAAM,CAACC,OAAO,CAACX,IAAI;MAChCS,KAAK,CAACjB,KAAK,GAAGkB,MAAM,CAACC,OAAO,CAACnB,KAAK;MAElCC,YAAY,CAACmB,OAAO,CAAC,WAAW,EAAEF,MAAM,CAACC,OAAO,CAACnB,KAAK,CAAC;MACvDC,YAAY,CAACmB,OAAO,CAAC,aAAa,EAAEf,IAAI,CAACgB,SAAS,CAACH,MAAM,CAACC,OAAO,CAACX,IAAI,CAAC,CAAC;IAC5E,CAAC;IACD;IACAc,MAAM,EAAGL,KAAK,IAAK;MACfA,KAAK,CAACV,UAAU,GAAG,KAAK;MACxBU,KAAK,CAACT,IAAI,GAAG,IAAI;MACjBS,KAAK,CAACjB,KAAK,GAAG,IAAI;MAClB;MACAC,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC;MACpCV,YAAY,CAACU,UAAU,CAAC,aAAa,CAAC;IAC1C,CAAC;IACD;IACAY,aAAa,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACT,IAAI,GAAGU,MAAM,CAACC,OAAO,CAAC,CAAQ;MACpClB,YAAY,CAACmB,OAAO,CAAC,UAAU,EAAEf,IAAI,CAACgB,SAAS,CAACH,MAAM,CAACC,OAAO,CAAC,CAAC;IACpE;EACJ;AACJ,CAAC,CAAC;AACF;AACA,OAAO,MAAM;EAAEH,YAAY;EAAEM,MAAM;EAAEC;AAAc,CAAC,GAAGX,SAAS,CAACY,OAAO;AACxE,eAAeZ,SAAS,CAACa,OAAO,CAAC,CAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}