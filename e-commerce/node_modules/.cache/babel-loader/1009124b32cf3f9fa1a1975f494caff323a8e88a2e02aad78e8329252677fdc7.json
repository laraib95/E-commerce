{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\personal\\\\Desktop\\\\Laraib Masood\\\\NETSOL\\\\e-commerce\\\\src\\\\Components\\\\ProductForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport './productForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProductForm() {\n  _s();\n  const {\n    id\n  } = useParams(); // Get product ID from URL if editing\n  const navigate = useNavigate();\n  const {\n    token\n  } = useSelector(state => state.auth);\n  const [name, setName] = useState('');\n  const [price, setPrice] = useState('');\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState('');\n  const [stock, setStock] = useState('');\n  const [seller, setSeller] = useState('');\n  const [images, setImages] = useState([]); // For file objects when uploading\n  const [imagesPreview, setImagesPreview] = useState([]); // For displaying image previews\n  const [oldImages, setOldImages] = useState([]); // For existing images when editing\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  // Define categories (should match your backend Product model enum)\n  const categories = ['Cameras', 'MemoryCards', 'InkCatiadges', 'Protectors', 'Headphones'];\n\n  // Effect to fetch product details if in \"edit\" mode\n  useEffect(() => {\n    if (id) {\n      // If ID exists, it's an edit operation\n      const fetchProduct = async () => {\n        setLoading(true);\n        setError('');\n        try {\n          const res = await fetch(`http://localhost:5000/api/v1/product/${id}`); // Public GET route\n          const data = await res.json();\n          if (res.ok) {\n            const product = data.product;\n            setName(product.name);\n            setPrice(product.price);\n            setDescription(product.description);\n            setCategory(product.category);\n            setStock(product.stock);\n            setSeller(product.seller);\n            setOldImages(product.images); // Set existing images\n          } else {\n            setError(data.message || 'Failed to fetch product details for edit.');\n          }\n        } catch (err) {\n          console.error(\"Fetch product for edit error:\", err);\n          setError('Server error: Could not fetch product details.');\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchProduct();\n    }\n  }, [id]); // Rerun when ID changes (i.e., component loaded for different product)\n\n  // Handle image selection\n  const onChangeImages = e => {\n    const files = Array.from(e.target.files);\n    setImages([]);\n    setImagesPreview([]);\n    setOldImages([]); // Clear old images when new ones are selected\n\n    files.forEach(file => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        if (reader.readyState === 2) {\n          setImagesPreview(oldArray => [...oldArray, reader.result]);\n          setImages(oldArray => [...oldArray, file]);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    // FormData is essential for sending files (images)\n    const formData = new FormData();\n    formData.append('name', name);\n    formData.append('price', price);\n    formData.append('description', description);\n    formData.append('category', category);\n    formData.append('stock', stock);\n    formData.append('seller', seller);\n    images.forEach(image => {\n      formData.append('images', image); // Append each selected image\n    });\n    // If editing and no new images are selected, send old images to backend if your API expects them for merge\n    // For simplicity, we assume backend replaces images. If not, you'd need to handle oldImages explicitly.\n\n    const method = id ? 'PUT' : 'POST';\n    const url = id ? `http://localhost:5000/api/v1/admin/product/${id}` : 'http://localhost:5000/api/v1/admin/product/new';\n    try {\n      const res = await fetch(url, {\n        method: method,\n        headers: {\n          'Authorization': `Bearer ${token}` // Admin-only route, requires token\n          // 'Content-Type': 'multipart/form-data' is NOT needed for FormData, it's set automatically\n        },\n        body: formData\n      });\n      const data = await res.json();\n      if (res.ok) {\n        setSuccess(data.message || (id ? 'Product updated successfully!' : 'Product added successfully!'));\n        navigate('/admin/products'); // Go back to product list after success\n      } else {\n        setError(data.message || (id ? 'Failed to update product.' : 'Failed to add product.'));\n      }\n    } catch (err) {\n      console.error(\"Product form submission error:\", err);\n      setError('Server error: Could not save product.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"product-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: id ? 'Edit Product' : 'Add New Product'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-message\",\n      children: \"Saving Product...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 23\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success-message\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"product-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Product Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"price\",\n          children: \"Price:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          value: price,\n          onChange: e => setPrice(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          value: description,\n          onChange: e => setDescription(e.target.value),\n          rows: \"5\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"category\",\n          children: \"Category:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"category\",\n          value: category,\n          onChange: e => setCategory(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this), categories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: cat,\n            children: cat\n          }, cat, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"stock\",\n          children: \"Stock:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"stock\",\n          value: stock,\n          onChange: e => setStock(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"seller\",\n          children: \"Seller Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"seller\",\n          value: seller,\n          onChange: e => setSeller(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"images\",\n          children: \"Product Images:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"images\",\n          name: \"images\",\n          onChange: onChangeImages,\n          multiple: true,\n          accept: \"image/*\" // Only allow image files\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-previews\",\n        children: [oldImages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"existing-images\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Existing Images:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this), oldImages.map((img, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n            src: img.url,\n            alt: `Existing ${index}`,\n            className: \"product-image-preview\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this), imagesPreview.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-images\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"New Images:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this), imagesPreview.map((img, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n            src: img,\n            alt: `New Preview ${index}`,\n            className: \"product-image-preview\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Saving...' : id ? 'Update Product' : 'Add Product'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n_s(ProductForm, \"eGiZf9iHXApvu3YjMZR48HXV8LE=\", false, function () {\n  return [useParams, useNavigate, useSelector];\n});\n_c = ProductForm;\nexport default ProductForm;\nvar _c;\n$RefreshReg$(_c, \"ProductForm\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useNavigate","useParams","jsxDEV","_jsxDEV","ProductForm","_s","id","navigate","token","state","auth","name","setName","price","setPrice","description","setDescription","category","setCategory","stock","setStock","seller","setSeller","images","setImages","imagesPreview","setImagesPreview","oldImages","setOldImages","loading","setLoading","error","setError","success","setSuccess","categories","fetchProduct","res","fetch","data","json","ok","product","message","err","console","onChangeImages","e","files","Array","from","target","forEach","file","reader","FileReader","onload","readyState","oldArray","result","readAsDataURL","handleSubmit","preventDefault","formData","FormData","append","image","method","url","headers","body","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","value","onChange","required","rows","map","cat","multiple","accept","length","img","index","src","alt","disabled","_c","$RefreshReg$"],"sources":["C:/Users/personal/Desktop/Laraib Masood/NETSOL/e-commerce/src/Components/ProductForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './productForm.css'; \r\n\r\nfunction ProductForm() {\r\n    const { id } = useParams(); // Get product ID from URL if editing\r\n    const navigate = useNavigate();\r\n    const { token } = useSelector(state => state.auth);\r\n\r\n    const [name, setName] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [category, setCategory] = useState('');\r\n    const [stock, setStock] = useState('');\r\n    const [seller, setSeller] = useState('');\r\n    const [images, setImages] = useState([]); // For file objects when uploading\r\n    const [imagesPreview, setImagesPreview] = useState([]); // For displaying image previews\r\n    const [oldImages, setOldImages] = useState([]); // For existing images when editing\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [success, setSuccess] = useState('');\r\n\r\n    // Define categories (should match your backend Product model enum)\r\n    const categories = [\r\n                'Cameras',\r\n                'MemoryCards',\r\n                'InkCatiadges',\r\n                'Protectors',\r\n                'Headphones',\r\n    ];\r\n\r\n    // Effect to fetch product details if in \"edit\" mode\r\n    useEffect(() => {\r\n        if (id) { // If ID exists, it's an edit operation\r\n            const fetchProduct = async () => {\r\n                setLoading(true);\r\n                setError('');\r\n                try {\r\n                    const res = await fetch(`http://localhost:5000/api/v1/product/${id}`); // Public GET route\r\n                    const data = await res.json();\r\n                    if (res.ok) {\r\n                        const product = data.product;\r\n                        setName(product.name);\r\n                        setPrice(product.price);\r\n                        setDescription(product.description);\r\n                        setCategory(product.category);\r\n                        setStock(product.stock);\r\n                        setSeller(product.seller);\r\n                        setOldImages(product.images); // Set existing images\r\n                    } else {\r\n                        setError(data.message || 'Failed to fetch product details for edit.');\r\n                    }\r\n                } catch (err) {\r\n                    console.error(\"Fetch product for edit error:\", err);\r\n                    setError('Server error: Could not fetch product details.');\r\n                } finally {\r\n                    setLoading(false);\r\n                }\r\n            };\r\n            fetchProduct();\r\n        }\r\n    }, [id]); // Rerun when ID changes (i.e., component loaded for different product)\r\n\r\n    // Handle image selection\r\n    const onChangeImages = e => {\r\n        const files = Array.from(e.target.files);\r\n        setImages([]);\r\n        setImagesPreview([]);\r\n        setOldImages([]); // Clear old images when new ones are selected\r\n\r\n        files.forEach(file => {\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                if (reader.readyState === 2) {\r\n                    setImagesPreview(oldArray => [...oldArray, reader.result]);\r\n                    setImages(oldArray => [...oldArray, file]);\r\n                }\r\n            };\r\n            reader.readAsDataURL(file);\r\n        });\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setError('');\r\n        setSuccess('');\r\n\r\n        // FormData is essential for sending files (images)\r\n        const formData = new FormData();\r\n        formData.append('name', name);\r\n        formData.append('price', price);\r\n        formData.append('description', description);\r\n        formData.append('category', category);\r\n        formData.append('stock', stock);\r\n        formData.append('seller', seller);\r\n\r\n        images.forEach(image => {\r\n            formData.append('images', image); // Append each selected image\r\n        });\r\n        // If editing and no new images are selected, send old images to backend if your API expects them for merge\r\n        // For simplicity, we assume backend replaces images. If not, you'd need to handle oldImages explicitly.\r\n\r\n        const method = id ? 'PUT' : 'POST';\r\n        const url = id ? `http://localhost:5000/api/v1/admin/product/${id}` : 'http://localhost:5000/api/v1/admin/product/new';\r\n\r\n        try {\r\n            const res = await fetch(url, {\r\n                method: method,\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}` // Admin-only route, requires token\r\n                    // 'Content-Type': 'multipart/form-data' is NOT needed for FormData, it's set automatically\r\n                },\r\n                body: formData,\r\n            });\r\n            const data = await res.json();\r\n\r\n            if (res.ok) {\r\n                setSuccess(data.message || (id ? 'Product updated successfully!' : 'Product added successfully!'));\r\n                navigate('/admin/products'); // Go back to product list after success\r\n            } else {\r\n                setError(data.message || (id ? 'Failed to update product.' : 'Failed to add product.'));\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Product form submission error:\", err);\r\n            setError('Server error: Could not save product.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"product-form-container\">\r\n            <h2>{id ? 'Edit Product' : 'Add New Product'}</h2>\r\n            {loading && <p className=\"loading-message\">Saving Product...</p>}\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            {success && <p className=\"success-message\">{success}</p>}\r\n\r\n            <form onSubmit={handleSubmit} className=\"product-form\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Product Name:</label>\r\n                    <input type=\"text\" id=\"name\" value={name} onChange={(e) => setName(e.target.value)} required />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"price\">Price:</label>\r\n                    <input type=\"number\" id=\"price\" value={price} onChange={(e) => setPrice(e.target.value)} required />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"description\">Description:</label>\r\n                    <textarea id=\"description\" value={description} onChange={(e) => setDescription(e.target.value)} rows=\"5\" required></textarea>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"category\">Category:</label>\r\n                    <select id=\"category\" value={category} onChange={(e) => setCategory(e.target.value)} required>\r\n                        <option value=\"\">Select Category</option>\r\n                        {categories.map(cat => (\r\n                            <option key={cat} value={cat}>{cat}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"stock\">Stock:</label>\r\n                    <input type=\"number\" id=\"stock\" value={stock} onChange={(e) => setStock(e.target.value)} required />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"seller\">Seller Name:</label>\r\n                    <input type=\"text\" id=\"seller\" value={seller} onChange={(e) => setSeller(e.target.value)} required />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"images\">Product Images:</label>\r\n                    <input\r\n                        type=\"file\"\r\n                        id=\"images\"\r\n                        name=\"images\"\r\n                        onChange={onChangeImages}\r\n                        multiple\r\n                        accept=\"image/*\" // Only allow image files\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"image-previews\">\r\n                    {oldImages.length > 0 && (\r\n                        <div className=\"existing-images\">\r\n                            <h4>Existing Images:</h4>\r\n                            {oldImages.map((img, index) => (\r\n                                <img key={index} src={img.url} alt={`Existing ${index}`} className=\"product-image-preview\" />\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                    {imagesPreview.length > 0 && (\r\n                        <div className=\"new-images\">\r\n                            <h4>New Images:</h4>\r\n                            {imagesPreview.map((img, index) => (\r\n                                <img key={index} src={img} alt={`New Preview ${index}`} className=\"product-image-preview\" />\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                <button type=\"submit\" disabled={loading}>\r\n                    {loading ? 'Saving...' : (id ? 'Update Product' : 'Add Product')}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProductForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM;IAAEC;EAAG,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAMM,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEQ;EAAM,CAAC,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;EAElD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACwB,MAAM,EAAEC,SAAS,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAC0B,MAAM,EAAEC,SAAS,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAAC4B,aAAa,EAAEC,gBAAgB,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD,MAAM,CAAC8B,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEhD,MAAM,CAACgC,OAAO,EAAEC,UAAU,CAAC,GAAGjC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkC,KAAK,EAAEC,QAAQ,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACoC,OAAO,EAAEC,UAAU,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAMsC,UAAU,GAAG,CACP,SAAS,EACT,aAAa,EACb,cAAc,EACd,YAAY,EACZ,YAAY,CACvB;;EAED;EACArC,SAAS,CAAC,MAAM;IACZ,IAAIQ,EAAE,EAAE;MAAE;MACN,MAAM8B,YAAY,GAAG,MAAAA,CAAA,KAAY;QAC7BN,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,EAAE,CAAC;QACZ,IAAI;UACA,MAAMK,GAAG,GAAG,MAAMC,KAAK,CAAC,wCAAwChC,EAAE,EAAE,CAAC,CAAC,CAAC;UACvE,MAAMiC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;UAC7B,IAAIH,GAAG,CAACI,EAAE,EAAE;YACR,MAAMC,OAAO,GAAGH,IAAI,CAACG,OAAO;YAC5B9B,OAAO,CAAC8B,OAAO,CAAC/B,IAAI,CAAC;YACrBG,QAAQ,CAAC4B,OAAO,CAAC7B,KAAK,CAAC;YACvBG,cAAc,CAAC0B,OAAO,CAAC3B,WAAW,CAAC;YACnCG,WAAW,CAACwB,OAAO,CAACzB,QAAQ,CAAC;YAC7BG,QAAQ,CAACsB,OAAO,CAACvB,KAAK,CAAC;YACvBG,SAAS,CAACoB,OAAO,CAACrB,MAAM,CAAC;YACzBO,YAAY,CAACc,OAAO,CAACnB,MAAM,CAAC,CAAC,CAAC;UAClC,CAAC,MAAM;YACHS,QAAQ,CAACO,IAAI,CAACI,OAAO,IAAI,2CAA2C,CAAC;UACzE;QACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;UACVC,OAAO,CAACd,KAAK,CAAC,+BAA+B,EAAEa,GAAG,CAAC;UACnDZ,QAAQ,CAAC,gDAAgD,CAAC;QAC9D,CAAC,SAAS;UACNF,UAAU,CAAC,KAAK,CAAC;QACrB;MACJ,CAAC;MACDM,YAAY,CAAC,CAAC;IAClB;EACJ,CAAC,EAAE,CAAC9B,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEV;EACA,MAAMwC,cAAc,GAAGC,CAAC,IAAI;IACxB,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACH,CAAC,CAACI,MAAM,CAACH,KAAK,CAAC;IACxCxB,SAAS,CAAC,EAAE,CAAC;IACbE,gBAAgB,CAAC,EAAE,CAAC;IACpBE,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;;IAElBoB,KAAK,CAACI,OAAO,CAACC,IAAI,IAAI;MAClB,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAM;QAClB,IAAIF,MAAM,CAACG,UAAU,KAAK,CAAC,EAAE;UACzB/B,gBAAgB,CAACgC,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAEJ,MAAM,CAACK,MAAM,CAAC,CAAC;UAC1DnC,SAAS,CAACkC,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAEL,IAAI,CAAC,CAAC;QAC9C;MACJ,CAAC;MACDC,MAAM,CAACM,aAAa,CAACP,IAAI,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC;EAED,MAAMQ,YAAY,GAAG,MAAOd,CAAC,IAAK;IAC9BA,CAAC,CAACe,cAAc,CAAC,CAAC;IAClBhC,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,EAAE,CAAC;;IAEd;IACA,MAAM6B,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEtD,IAAI,CAAC;IAC7BoD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEpD,KAAK,CAAC;IAC/BkD,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAElD,WAAW,CAAC;IAC3CgD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEhD,QAAQ,CAAC;IACrC8C,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE9C,KAAK,CAAC;IAC/B4C,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAE5C,MAAM,CAAC;IAEjCE,MAAM,CAAC6B,OAAO,CAACc,KAAK,IAAI;MACpBH,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEC,KAAK,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC;IACF;IACA;;IAEA,MAAMC,MAAM,GAAG7D,EAAE,GAAG,KAAK,GAAG,MAAM;IAClC,MAAM8D,GAAG,GAAG9D,EAAE,GAAG,8CAA8CA,EAAE,EAAE,GAAG,gDAAgD;IAEtH,IAAI;MACA,MAAM+B,GAAG,GAAG,MAAMC,KAAK,CAAC8B,GAAG,EAAE;QACzBD,MAAM,EAAEA,MAAM;QACdE,OAAO,EAAE;UACL,eAAe,EAAE,UAAU7D,KAAK,EAAE,CAAC;UACnC;QACJ,CAAC;QACD8D,IAAI,EAAEP;MACV,CAAC,CAAC;MACF,MAAMxB,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAE7B,IAAIH,GAAG,CAACI,EAAE,EAAE;QACRP,UAAU,CAACK,IAAI,CAACI,OAAO,KAAKrC,EAAE,GAAG,+BAA+B,GAAG,6BAA6B,CAAC,CAAC;QAClGC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;MACjC,CAAC,MAAM;QACHyB,QAAQ,CAACO,IAAI,CAACI,OAAO,KAAKrC,EAAE,GAAG,2BAA2B,GAAG,wBAAwB,CAAC,CAAC;MAC3F;IACJ,CAAC,CAAC,OAAOsC,GAAG,EAAE;MACVC,OAAO,CAACd,KAAK,CAAC,gCAAgC,EAAEa,GAAG,CAAC;MACpDZ,QAAQ,CAAC,uCAAuC,CAAC;IACrD,CAAC,SAAS;MACNF,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,oBACI3B,OAAA;IAAKoE,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACnCrE,OAAA;MAAAqE,QAAA,EAAKlE,EAAE,GAAG,cAAc,GAAG;IAAiB;MAAAmE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACjD/C,OAAO,iBAAI1B,OAAA;MAAGoE,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAC/D7C,KAAK,iBAAI5B,OAAA;MAAGoE,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAEzC;IAAK;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjD3C,OAAO,iBAAI9B,OAAA;MAAGoE,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAEvC;IAAO;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAExDzE,OAAA;MAAM0E,QAAQ,EAAEhB,YAAa;MAACU,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAClDrE,OAAA;QAAKoE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBrE,OAAA;UAAO2E,OAAO,EAAC,MAAM;UAAAN,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC3CzE,OAAA;UAAO4E,IAAI,EAAC,MAAM;UAACzE,EAAE,EAAC,MAAM;UAAC0E,KAAK,EAAErE,IAAK;UAACsE,QAAQ,EAAGlC,CAAC,IAAKnC,OAAO,CAACmC,CAAC,CAACI,MAAM,CAAC6B,KAAK,CAAE;UAACE,QAAQ;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9F,CAAC,eACNzE,OAAA;QAAKoE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBrE,OAAA;UAAO2E,OAAO,EAAC,OAAO;UAAAN,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrCzE,OAAA;UAAO4E,IAAI,EAAC,QAAQ;UAACzE,EAAE,EAAC,OAAO;UAAC0E,KAAK,EAAEnE,KAAM;UAACoE,QAAQ,EAAGlC,CAAC,IAAKjC,QAAQ,CAACiC,CAAC,CAACI,MAAM,CAAC6B,KAAK,CAAE;UAACE,QAAQ;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnG,CAAC,eACNzE,OAAA;QAAKoE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBrE,OAAA;UAAO2E,OAAO,EAAC,aAAa;UAAAN,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACjDzE,OAAA;UAAUG,EAAE,EAAC,aAAa;UAAC0E,KAAK,EAAEjE,WAAY;UAACkE,QAAQ,EAAGlC,CAAC,IAAK/B,cAAc,CAAC+B,CAAC,CAACI,MAAM,CAAC6B,KAAK,CAAE;UAACG,IAAI,EAAC,GAAG;UAACD,QAAQ;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5H,CAAC,eACNzE,OAAA;QAAKoE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBrE,OAAA;UAAO2E,OAAO,EAAC,UAAU;UAAAN,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC3CzE,OAAA;UAAQG,EAAE,EAAC,UAAU;UAAC0E,KAAK,EAAE/D,QAAS;UAACgE,QAAQ,EAAGlC,CAAC,IAAK7B,WAAW,CAAC6B,CAAC,CAACI,MAAM,CAAC6B,KAAK,CAAE;UAACE,QAAQ;UAAAV,QAAA,gBACzFrE,OAAA;YAAQ6E,KAAK,EAAC,EAAE;YAAAR,QAAA,EAAC;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACxCzC,UAAU,CAACiD,GAAG,CAACC,GAAG,iBACflF,OAAA;YAAkB6E,KAAK,EAAEK,GAAI;YAAAb,QAAA,EAAEa;UAAG,GAArBA,GAAG;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA2B,CAC9C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eACNzE,OAAA;QAAKoE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBrE,OAAA;UAAO2E,OAAO,EAAC,OAAO;UAAAN,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrCzE,OAAA;UAAO4E,IAAI,EAAC,QAAQ;UAACzE,EAAE,EAAC,OAAO;UAAC0E,KAAK,EAAE7D,KAAM;UAAC8D,QAAQ,EAAGlC,CAAC,IAAK3B,QAAQ,CAAC2B,CAAC,CAACI,MAAM,CAAC6B,KAAK,CAAE;UAACE,QAAQ;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnG,CAAC,eACNzE,OAAA;QAAKoE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBrE,OAAA;UAAO2E,OAAO,EAAC,QAAQ;UAAAN,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC5CzE,OAAA;UAAO4E,IAAI,EAAC,MAAM;UAACzE,EAAE,EAAC,QAAQ;UAAC0E,KAAK,EAAE3D,MAAO;UAAC4D,QAAQ,EAAGlC,CAAC,IAAKzB,SAAS,CAACyB,CAAC,CAACI,MAAM,CAAC6B,KAAK,CAAE;UAACE,QAAQ;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpG,CAAC,eAENzE,OAAA;QAAKoE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBrE,OAAA;UAAO2E,OAAO,EAAC,QAAQ;UAAAN,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC/CzE,OAAA;UACI4E,IAAI,EAAC,MAAM;UACXzE,EAAE,EAAC,QAAQ;UACXK,IAAI,EAAC,QAAQ;UACbsE,QAAQ,EAAEnC,cAAe;UACzBwC,QAAQ;UACRC,MAAM,EAAC,SAAS,CAAC;QAAA;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAENzE,OAAA;QAAKoE,SAAS,EAAC,gBAAgB;QAAAC,QAAA,GAC1B7C,SAAS,CAAC6D,MAAM,GAAG,CAAC,iBACjBrF,OAAA;UAAKoE,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC5BrE,OAAA;YAAAqE,QAAA,EAAI;UAAgB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACxBjD,SAAS,CAACyD,GAAG,CAAC,CAACK,GAAG,EAAEC,KAAK,kBACtBvF,OAAA;YAAiBwF,GAAG,EAAEF,GAAG,CAACrB,GAAI;YAACwB,GAAG,EAAE,YAAYF,KAAK,EAAG;YAACnB,SAAS,EAAC;UAAuB,GAAhFmB,KAAK;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA6E,CAC/F,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CACR,EACAnD,aAAa,CAAC+D,MAAM,GAAG,CAAC,iBACrBrF,OAAA;UAAKoE,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACvBrE,OAAA;YAAAqE,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACnBnD,aAAa,CAAC2D,GAAG,CAAC,CAACK,GAAG,EAAEC,KAAK,kBAC1BvF,OAAA;YAAiBwF,GAAG,EAAEF,GAAI;YAACG,GAAG,EAAE,eAAeF,KAAK,EAAG;YAACnB,SAAS,EAAC;UAAuB,GAA/EmB,KAAK;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA4E,CAC9F,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eAENzE,OAAA;QAAQ4E,IAAI,EAAC,QAAQ;QAACc,QAAQ,EAAEhE,OAAQ;QAAA2C,QAAA,EACnC3C,OAAO,GAAG,WAAW,GAAIvB,EAAE,GAAG,gBAAgB,GAAG;MAAc;QAAAmE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd;AAACvE,EAAA,CA3MQD,WAAW;EAAA,QACDH,SAAS,EACPD,WAAW,EACVD,WAAW;AAAA;AAAA+F,EAAA,GAHxB1F,WAAW;AA6MpB,eAAeA,WAAW;AAAC,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}